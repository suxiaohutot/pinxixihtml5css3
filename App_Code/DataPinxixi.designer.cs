#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pinxixi")]
public partial class DataPinxixiDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void InsertBill(Bill instance);
  partial void UpdateBill(Bill instance);
  partial void DeleteBill(Bill instance);
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InsertShopping_Cart(Shopping_Cart instance);
  partial void UpdateShopping_Cart(Shopping_Cart instance);
  partial void DeleteShopping_Cart(Shopping_Cart instance);
  partial void InsertCommodity(Commodity instance);
  partial void UpdateCommodity(Commodity instance);
  partial void DeleteCommodity(Commodity instance);
  partial void InsertAdmin(Admin instance);
  partial void UpdateAdmin(Admin instance);
  partial void DeleteAdmin(Admin instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DataPinxixiDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["pinxixiConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataPinxixiDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataPinxixiDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataPinxixiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataPinxixiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Bill> Bill
	{
		get
		{
			return this.GetTable<Bill>();
		}
	}
	
	public System.Data.Linq.Table<Comment> Comment
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<Shopping_Cart> Shopping_Cart
	{
		get
		{
			return this.GetTable<Shopping_Cart>();
		}
	}
	
	public System.Data.Linq.Table<Commodity> Commodity
	{
		get
		{
			return this.GetTable<Commodity>();
		}
	}
	
	public System.Data.Linq.Table<Admin> Admin
	{
		get
		{
			return this.GetTable<Admin>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Bid;
	
	private string _Uid;
	
	private string _Uname;
	
	private string _Cid;
	
	private string _Cname;
	
	private string _Ccategory;
	
	private string _Cnumber;
	
	private string _Cprice;
	
	private string _Csumprice;
	
	private string _Bcomment;
	
	private System.Nullable<System.DateTime> _Bdatetime;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBidChanging(string value);
    partial void OnBidChanged();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    partial void OnUnameChanging(string value);
    partial void OnUnameChanged();
    partial void OnCidChanging(string value);
    partial void OnCidChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnCcategoryChanging(string value);
    partial void OnCcategoryChanged();
    partial void OnCnumberChanging(string value);
    partial void OnCnumberChanged();
    partial void OnCpriceChanging(string value);
    partial void OnCpriceChanged();
    partial void OnCsumpriceChanging(string value);
    partial void OnCsumpriceChanged();
    partial void OnBcommentChanging(string value);
    partial void OnBcommentChanged();
    partial void OnBdatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBdatetimeChanged();
    #endregion
	
	public Bill()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bid", DbType="NChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Bid
	{
		get
		{
			return this._Bid;
		}
		set
		{
			if ((this._Bid != value))
			{
				this.OnBidChanging(value);
				this.SendPropertyChanging();
				this._Bid = value;
				this.SendPropertyChanged("Bid");
				this.OnBidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="NChar(11)")]
	public string Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uname", DbType="NChar(10)")]
	public string Uname
	{
		get
		{
			return this._Uname;
		}
		set
		{
			if ((this._Uname != value))
			{
				this.OnUnameChanging(value);
				this.SendPropertyChanging();
				this._Uname = value;
				this.SendPropertyChanged("Uname");
				this.OnUnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", DbType="NChar(10)")]
	public string Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="NChar(10)")]
	public string Cname
	{
		get
		{
			return this._Cname;
		}
		set
		{
			if ((this._Cname != value))
			{
				this.OnCnameChanging(value);
				this.SendPropertyChanging();
				this._Cname = value;
				this.SendPropertyChanged("Cname");
				this.OnCnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ccategory", DbType="NChar(10)")]
	public string Ccategory
	{
		get
		{
			return this._Ccategory;
		}
		set
		{
			if ((this._Ccategory != value))
			{
				this.OnCcategoryChanging(value);
				this.SendPropertyChanging();
				this._Ccategory = value;
				this.SendPropertyChanged("Ccategory");
				this.OnCcategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cnumber", DbType="Char(10)")]
	public string Cnumber
	{
		get
		{
			return this._Cnumber;
		}
		set
		{
			if ((this._Cnumber != value))
			{
				this.OnCnumberChanging(value);
				this.SendPropertyChanging();
				this._Cnumber = value;
				this.SendPropertyChanged("Cnumber");
				this.OnCnumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cprice", DbType="NChar(10)")]
	public string Cprice
	{
		get
		{
			return this._Cprice;
		}
		set
		{
			if ((this._Cprice != value))
			{
				this.OnCpriceChanging(value);
				this.SendPropertyChanging();
				this._Cprice = value;
				this.SendPropertyChanged("Cprice");
				this.OnCpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Csumprice", DbType="NChar(10)")]
	public string Csumprice
	{
		get
		{
			return this._Csumprice;
		}
		set
		{
			if ((this._Csumprice != value))
			{
				this.OnCsumpriceChanging(value);
				this.SendPropertyChanging();
				this._Csumprice = value;
				this.SendPropertyChanged("Csumprice");
				this.OnCsumpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bcomment", DbType="NChar(50)")]
	public string Bcomment
	{
		get
		{
			return this._Bcomment;
		}
		set
		{
			if ((this._Bcomment != value))
			{
				this.OnBcommentChanging(value);
				this.SendPropertyChanging();
				this._Bcomment = value;
				this.SendPropertyChanged("Bcomment");
				this.OnBcommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bdatetime", DbType="DateTime")]
	public System.Nullable<System.DateTime> Bdatetime
	{
		get
		{
			return this._Bdatetime;
		}
		set
		{
			if ((this._Bdatetime != value))
			{
				this.OnBdatetimeChanging(value);
				this.SendPropertyChanging();
				this._Bdatetime = value;
				this.SendPropertyChanged("Bdatetime");
				this.OnBdatetimeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Cid;
	
	private string _Uid;
	
	private string _Ucomment;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCidChanging(string value);
    partial void OnCidChanged();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    partial void OnUcommentChanging(string value);
    partial void OnUcommentChanged();
    #endregion
	
	public Comment()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="NChar(10)")]
	public string Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ucomment", DbType="NChar(50)")]
	public string Ucomment
	{
		get
		{
			return this._Ucomment;
		}
		set
		{
			if ((this._Ucomment != value))
			{
				this.OnUcommentChanging(value);
				this.SendPropertyChanging();
				this._Ucomment = value;
				this.SendPropertyChanged("Ucomment");
				this.OnUcommentChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shopping_Cart")]
public partial class Shopping_Cart : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Sid;
	
	private string _Cid;
	
	private string _Cname;
	
	private string _Cprice;
	
	private string _Cnumber;
	
	private string _Csumprice;
	
	private string _Cphotopath;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSidChanging(string value);
    partial void OnSidChanged();
    partial void OnCidChanging(string value);
    partial void OnCidChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnCpriceChanging(string value);
    partial void OnCpriceChanged();
    partial void OnCnumberChanging(string value);
    partial void OnCnumberChanged();
    partial void OnCsumpriceChanging(string value);
    partial void OnCsumpriceChanged();
    partial void OnCphotopathChanging(string value);
    partial void OnCphotopathChanged();
    #endregion
	
	public Shopping_Cart()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sid", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Sid
	{
		get
		{
			return this._Sid;
		}
		set
		{
			if ((this._Sid != value))
			{
				this.OnSidChanging(value);
				this.SendPropertyChanging();
				this._Sid = value;
				this.SendPropertyChanged("Sid");
				this.OnSidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", DbType="NChar(10)")]
	public string Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="NChar(10)")]
	public string Cname
	{
		get
		{
			return this._Cname;
		}
		set
		{
			if ((this._Cname != value))
			{
				this.OnCnameChanging(value);
				this.SendPropertyChanging();
				this._Cname = value;
				this.SendPropertyChanged("Cname");
				this.OnCnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cprice", DbType="NChar(10)")]
	public string Cprice
	{
		get
		{
			return this._Cprice;
		}
		set
		{
			if ((this._Cprice != value))
			{
				this.OnCpriceChanging(value);
				this.SendPropertyChanging();
				this._Cprice = value;
				this.SendPropertyChanged("Cprice");
				this.OnCpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cnumber", DbType="NChar(10)")]
	public string Cnumber
	{
		get
		{
			return this._Cnumber;
		}
		set
		{
			if ((this._Cnumber != value))
			{
				this.OnCnumberChanging(value);
				this.SendPropertyChanging();
				this._Cnumber = value;
				this.SendPropertyChanged("Cnumber");
				this.OnCnumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Csumprice", DbType="NChar(10)")]
	public string Csumprice
	{
		get
		{
			return this._Csumprice;
		}
		set
		{
			if ((this._Csumprice != value))
			{
				this.OnCsumpriceChanging(value);
				this.SendPropertyChanging();
				this._Csumprice = value;
				this.SendPropertyChanged("Csumprice");
				this.OnCsumpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cphotopath", DbType="NChar(10)")]
	public string Cphotopath
	{
		get
		{
			return this._Cphotopath;
		}
		set
		{
			if ((this._Cphotopath != value))
			{
				this.OnCphotopathChanging(value);
				this.SendPropertyChanging();
				this._Cphotopath = value;
				this.SendPropertyChanged("Cphotopath");
				this.OnCphotopathChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commodity")]
public partial class Commodity : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Cid;
	
	private string _Cname;
	
	private string _Ccategory;
	
	private string _Cprice;
	
	private string _Cnumber;
	
	private string _Cphotopath;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCidChanging(string value);
    partial void OnCidChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnCcategoryChanging(string value);
    partial void OnCcategoryChanged();
    partial void OnCpriceChanging(string value);
    partial void OnCpriceChanged();
    partial void OnCnumberChanging(string value);
    partial void OnCnumberChanged();
    partial void OnCphotopathChanging(string value);
    partial void OnCphotopathChanged();
    #endregion
	
	public Commodity()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="NChar(10)")]
	public string Cname
	{
		get
		{
			return this._Cname;
		}
		set
		{
			if ((this._Cname != value))
			{
				this.OnCnameChanging(value);
				this.SendPropertyChanging();
				this._Cname = value;
				this.SendPropertyChanged("Cname");
				this.OnCnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ccategory", DbType="NChar(10)")]
	public string Ccategory
	{
		get
		{
			return this._Ccategory;
		}
		set
		{
			if ((this._Ccategory != value))
			{
				this.OnCcategoryChanging(value);
				this.SendPropertyChanging();
				this._Ccategory = value;
				this.SendPropertyChanged("Ccategory");
				this.OnCcategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cprice", DbType="NChar(10)")]
	public string Cprice
	{
		get
		{
			return this._Cprice;
		}
		set
		{
			if ((this._Cprice != value))
			{
				this.OnCpriceChanging(value);
				this.SendPropertyChanging();
				this._Cprice = value;
				this.SendPropertyChanged("Cprice");
				this.OnCpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cnumber", DbType="NChar(10)")]
	public string Cnumber
	{
		get
		{
			return this._Cnumber;
		}
		set
		{
			if ((this._Cnumber != value))
			{
				this.OnCnumberChanging(value);
				this.SendPropertyChanging();
				this._Cnumber = value;
				this.SendPropertyChanged("Cnumber");
				this.OnCnumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cphotopath", DbType="NChar(10)")]
	public string Cphotopath
	{
		get
		{
			return this._Cphotopath;
		}
		set
		{
			if ((this._Cphotopath != value))
			{
				this.OnCphotopathChanging(value);
				this.SendPropertyChanging();
				this._Cphotopath = value;
				this.SendPropertyChanged("Cphotopath");
				this.OnCphotopathChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Aid;
	
	private string _Apwd;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAidChanging(string value);
    partial void OnAidChanged();
    partial void OnApwdChanging(string value);
    partial void OnApwdChanged();
    #endregion
	
	public Admin()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Aid
	{
		get
		{
			return this._Aid;
		}
		set
		{
			if ((this._Aid != value))
			{
				this.OnAidChanging(value);
				this.SendPropertyChanging();
				this._Aid = value;
				this.SendPropertyChanged("Aid");
				this.OnAidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apwd", DbType="NChar(10)")]
	public string Apwd
	{
		get
		{
			return this._Apwd;
		}
		set
		{
			if ((this._Apwd != value))
			{
				this.OnApwdChanging(value);
				this.SendPropertyChanging();
				this._Apwd = value;
				this.SendPropertyChanged("Apwd");
				this.OnApwdChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Uid;
	
	private string _Uname;
	
	private string _Upwd;
	
	private System.Nullable<char> _Ufrozen;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    partial void OnUnameChanging(string value);
    partial void OnUnameChanged();
    partial void OnUpwdChanging(string value);
    partial void OnUpwdChanged();
    partial void OnUfrozenChanging(System.Nullable<char> value);
    partial void OnUfrozenChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="NChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uname", DbType="NChar(10)")]
	public string Uname
	{
		get
		{
			return this._Uname;
		}
		set
		{
			if ((this._Uname != value))
			{
				this.OnUnameChanging(value);
				this.SendPropertyChanging();
				this._Uname = value;
				this.SendPropertyChanged("Uname");
				this.OnUnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Upwd", DbType="NChar(16)")]
	public string Upwd
	{
		get
		{
			return this._Upwd;
		}
		set
		{
			if ((this._Upwd != value))
			{
				this.OnUpwdChanging(value);
				this.SendPropertyChanging();
				this._Upwd = value;
				this.SendPropertyChanged("Upwd");
				this.OnUpwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ufrozen", DbType="NChar(1)")]
	public System.Nullable<char> Ufrozen
	{
		get
		{
			return this._Ufrozen;
		}
		set
		{
			if ((this._Ufrozen != value))
			{
				this.OnUfrozenChanging(value);
				this.SendPropertyChanging();
				this._Ufrozen = value;
				this.SendPropertyChanged("Ufrozen");
				this.OnUfrozenChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
